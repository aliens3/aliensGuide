# mPONGで遊ぶ mPONGの構成: コンピュータ,カセット，キーボード，スクリーン ==============================================================

[[page]]
t = "title"
c = ""
p ="""
1 ゲームからコンピュータを学ぼう
"""

[[page]]
t = "left"
c = "yaranai1"
p ="""
今回はコンピュータについて学ぶ．
そこで，このゲームで遊ぶ．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="mPONGのカセットのよりの絵"/>
"""


[[page]]
t = "right"
c = "yaruo1"
p ="""
mPONG？なんだこれ？
"""

[[page]]
t = "left"
c = "yaranai1"
p ="""
これはゲームカセットだ．
ファミコンみたいな感じで，
これをこのコンピュータに挿す．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="mPONGを挿した"/>
"""


[[page]]
t = "left"
c = "yaranai1"
p = """
で，スクリーンとキーボードに繋いで電源を入れる．
すると，ゲームスタートだ！
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="スクリーンとキーボードにつなぐ"/>
"""


[[page]]
t = "right"
c = "yaruo_pc"
p ="""
うわ，いきなり始まった！
まあーやってみるか．
"""

[[page]]
t = "raw"
p ="""
<hr>
"""

[[page]]
t = "aut"
p ="""
やる夫がプレイしているmPONGをweb上で再現したゲームがこちらにあります．
ページの読み込みが電源を入れた瞬間に対応しています．
キーボードのAのを押すと左に，Dを押すと右にバットが動きます．
落ちてくるボールを落とすゲームオーバーです．
皆さんも実際にプレイして見てください．
{.pb-20}
"""


# mPONGはつまらないけどコンピュータの全てが学べる ==============================================================

[[page]]
t = "title"
c = ""
p ="""
2 このゲームはつまらないけど有用
"""

[[page]]
t = "right"
c = "yaruo_pc2"
p ="""
・・・・・・・・・
"""

[[page]]
t = "right"
c = "yaruo_pc"
p ="""
つまんね．
"""


[[page]]
t = "left"
c = "yaruo_aori1"
p ="""
なんだよ，これくそゲーか笑
読み込まれたらいきなり始まるし，音もスコアも何もないし，
ミスってゲームオーバーになったら固まるだけだし！
"""

[[page]]
t = "left"
c = "yaranai1"
p ="""
これは最初期に生まれたPONGというゲームをモデルに作った．
しかし，PONGに比べても殆どの機能を削った．
だから，このゲームをmPONG(minimum PONG)なんだ．
"""

[[page]]
t = "left"
c = "yaranai1"
p ="""
確かにmPONGは面白くはない．
しかし，このゲームを0から作る方法を理解できれば，
コンピュータの本質的なところを全て学べるんだ．
"""

[[page]]
t = "right"
c = "yaruo_aori2"
p = """
ふーん， <i>'すべて'</i> ねぇ，
ずいぶん大きく出たなあ
聞いてやろうじゃないか
{.pb-20}
"""

# 動きはパラパラ漫画の原理 フレーム FPS==============================================================

[[page]]
t = "title"
c = ""
p ="""
3 
"""

[[page]]
t = "left"
c = "yaranai1"
p ="""
まず，このゲームには動きがあるな？ボールは落ちてくるし，
下の棒は十字キーで動かすことができる．
"""

[[page]]
t = "right"
c = "yaruo1"
p ="""
                                そうだね，動きがなきゃ
                                ゲームとは言わないよ
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
この動きの原理はパラパラ漫画と一緒だ．
つまり，少しずつ位置をずらした画像を素早く見せることで
動きを表現している．
"""

[[page]]
t = "raw"
c = ""
p = """
<iframe src="https://www.youtube.com/embed/ryGv8wXz_UA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen class="w-[560px] max-w-full h-[310px]"></iframe>
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
なるほど，一つ一つの画像は止まっているけど，
連続的に見せられると動いているように見えるわけだな． 
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
これをふまえると，mPONGの最序盤に，
左上からボールが落ちてくる動きを表現する方法は

1. 現在のボールを消す
2. 次の位置にボールを書く

の繰り返しだ．
"""

[[page]]
t = "right"
c = "yaruo2"
p = """
ステップ1 = 前の画像を消すこと
ステップ2 = 次の画像を見せること
っていうことか．

2ステップ合わせてパラパラ漫画で
紙を1枚めくることと対応してるんだな．{.pt-3}
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
その通り．コンピュータでは画像のことを**フレーム**と言うぞ．
で，この前のフレームを消して，次のフレームを見せる，
繰り返しのスピードによって，動きの速さが変わることがわかるか？
"""

[[page]]
t = "right"
c = "yaruo_joy"
p = """
素早く繰り返せば早く動くし，
逆にゆっくりやれば，動きは遅くなって，
ゆっくりになりすぎると，動いているように見えなくなるってことだろ？
パラパラ漫画と同じだし簡単だよ．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
そうだな．一般的には1秒間に何フレーム見せるのかを，
<b>フレームレート(FPS=frame per second)</b>という．
ゲームとかyoutubeとかだと30~60FPSが一般的だな．
一方，mPONGは10FPSだ．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
てことは，

1. 現在のボールを消す(現フレームを消す)
2. 次の位置にボールを書く(次フレームを書く)

を1秒間で10回繰り返すってことか．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
その通り．

実際，mPONG最序盤をステップ1,2ごとにコマ送りにしたものがあるから，
これで今までのことを理解してくれ．{.pt-4}
"""

[[page]]
t = "right"
c = "yaruo_pc"
p = """
なるほどな，完全に理解した．
"""

# フレームを描くのに必要な情報は全ピクセルをbitで指定する==============================================================

## mコンの紹介

[[page]]
t = "title"
c = ""
p = """
4
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
以上から，ゲームをプレイするためには，
どんどん新しいフレームに更新する必要がある．
次にスクリーンにどんなフレームを写すか，の処理をしているのが
このコンピュータだ．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="mコンのアップ"/>
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
これって，コンピュータなのか？ゲーム機なのかと思ってたぜ．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
うん，ゲーム機とも言えるしコンピュータとも言える．
そもそも，この2つには本質的な違いはないんだ．

パソコンでもゲームはプレイできるし，
ゲーム機でもwebサイトにアクセスできるだろ？
ゲームをメインの目的に作られたコンピュータをゲーム機と呼ぶだけだ．{.pt-4}
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
しかし，これは
- ゲームプレイだけではなく，色々な用途を目的とする
- かつ最小限の機能に絞られている

ようなものだから，mコンピュータ,mコンと呼ぶことにしよう．
"""

## mコンのスクリーンが512*256であることの説明

[[page]]
t = "title"
c = ""
p = """
5
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
このmコンから伝えられた情報によって
スクリーンはフレームを更新するわけだ．
実際，スクリーンはmコンと繋がれずに単独で
mPONGのフレームを更新する，なんてことはできない．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
じゃあmコンからはどんな情報が
スクリーンに送られていると思う？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
それは・・・，電気信号が伝わっていくんじゃないか．
ケーブルで繋がれているわけだし．電源にささないと動かないし．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
それは，情報でなくて物理的な実体だな．
情報というのは，電気信号とは違うんだ．
ただ，情報とは何かという話をすると抽象的になってしまうから，具体的に行こう．


"""

[[page]]
t = "left"
c = "yaranai1"
p = """
まず，mコンに繋ぐことができるスクリーンの画素数は，横512 × 縦256なんだ．
画素数って何か説明できるか？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
そんなもん，ネットから拾ってきてやるよ！
『photo-tabi写真を通して人生を旅する．写真×良好×旅ブログ』
さんありがとうございます!めちゃくちゃ分かりやすいです！
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="https://i0.wp.com/photo-tabi.com/wp-content/uploads/2021/12/e1114db2c261a60a24ac20fc92eb16a2-1.jpg?resize=1000%2C563&ssl=1" alt=""/>
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
つまり，1つ１つの画像は小さな四角=ピクセルから構成されていて，
画像の横ピクセル数*縦ピクセル数が画素数ってわけだよな．
mPONGの場合だと横512 × 縦256 = 13万画素ってわけだな．
めちゃくちゃ低いぜ．
"""


[[page]]
t = "left"
c = "yaranai1"
p = """
うん，その通りだ．大切なのは一つのピクセルには1つの色しか塗れないということだな．
そして，mコンのスクリーンには更に制限があって，色は黒か白かの2種類だけだ．
"""

[[page]]
t = "right"
c = "yaruo_potechi"
p = """
ファック！？青とか赤とかは？
さっきの画像では「画素」って文字すら，
境界が灰色でグラデーションになってたぞ！
そういうのはどうするんだ？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
そういうのは諦めよう．
コンピュータの本質ではないからな．
"""

[[page]]
t = "right"
c = "yaruo_cry"
p = """

"""














## フレームを決めるためにスクリーンに伝える情報 情報とはなにか

[[page]]
t = "title"
c = ""
p = """
5
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
では，mPONGプレイ中のあるフレームを抜き取ったものを見てみよう．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="pixelartで作った画像"/>
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
この画像を拡大してみると，こういうふうになる．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
ボールは * ピクセルで，バットは *　ピクセルの四角形なんだな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ああ，以上からこのフレームを描くためには
スクリーンにはどんな情報を渡せばいいと思う？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
ボールの位置がこの場合は上から10ピクセルで左からは15ピクセルか．
バットの位置は面倒だけど，まあ数えたらこれも上からxピクセル，左からyピクセルが分かるから，
それをスクリーンに渡せばいいだろ．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
ああ，あとは，ボールの幅がa*bでバットの幅はc\*dだからな．
これさえ分かれば描けるだろ！
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
いや，それだけじゃ足りないな．それ以外の場所をどう書いたらいいかが分からないからな．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
いやいや，何も言ってないところは空白にしとくだろ，常識的に考えて！
絵描き歌で，言われてない部分をどう描くか気にするやつが居るか？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
その常識は，せまい人間にしか通用しない．
スクリーンは伝えられたことはやるが，伝えられないことはできない．
情報を不足なく伝えないと駄目なんだ．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
じゃあ，ボールの位置がどうとか，バットの位置がどうだけ言っても駄目で，
512*256ピクセル全部について白で塗るか，黒で塗るか伝えないといけないのか．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
そうなるな，その情報があれば，間違いなく確実にフレームの状態を指定できるだろ．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
確かに，その方が間違いがないし，いいかもな．めっちゃメンドイけど．
"""

[[page]]
t = "raw"
c = ""
p = """
<hr>
"""


[[page]]
t = "aut"
c = ""
p = """
情報について簡単に説明しておきましょう．簡単のために512*256ピクセルのうち，
スクリーンの左上端2\*2ピクセルにだけに注目します．

この塗り方を指定するためには，

- 
- 

と色々な方法が考えられますが，どれも同じ情報を伝えています．情報は色々な実体で表現できるのですね．
これが電気信号は物理的な実体で，情報とは違うものだという発言の真意です．
"""


## 01で伝えること

[[page]]
t = "title"
c = ""
p = """

"""

[[page]]
t = "left"
c = "yaranai1"
p = """
コンピュータからスクリーンに情報を伝えるときには，
このピクセルを白で塗れ，黒で塗れ，と伝える代わりに，
例えば，黒を1で白を0で表現して，512*256個の01を渡す．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
例えば，こういう01が渡された場合には，こういう画面表示になるわけだな．
一つ一つの01をビットと呼ぶ．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
1を黒で，0を白で塗る，っていうのはスクリーンはどうやって知ったんだ？
それは伝えられてなくないか？
伝えられたことしかできないんだろ？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
良いポイントに気づいたな．その問題を解決する方法の一つは，
0=白，1=黒で塗ることを初期設定としておくことだ．
スクリーンは製造の段階でその情報が与えられていたんだな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
しかし，そうすると柔軟性がない，と残念だから，こうする方法もある．
例えば，mPONGの黒の部分が赤色になったり青色になったりしたら面白くないか？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
クソゲーなのは変わらないけど，ちょっと面白いかもな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ここを白で，ここを黒で塗れと伝えられたら，そう塗るしかないが，
01なら，そういう具体的な意味は含まれていないからな．
やる夫が疑問に思った通り，伝えられた01にどんな意味を持たせるかはスクリーン側の自由だ．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
そこで，スクリーン側で0を白で1を赤で表現することにすれば，こんなふうに赤色のゲームに変えることもできる．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="赤色ver"/>
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
しょうもないけど，ちょっとだけ心躍るな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
例えばスクリーンにボタンをつけておいて，どのボタンが押されているかで，1を何色で表すのかを変えられる
スクリーンにすることもできるだろうな．必要な情報1を何で表すかは，ボタンから伝えられるわけだ．

まあ，実際にはそんなことはしないがな．もっと実際的な例は思いつくか？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
うーん，，，，例えばスクリーンに明るさを調節するボタンが付いてたりするよな？
あれも，コンピュータから同じbit情報が伝えられても，表示を変える方法の一つか．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
いい実例だな．
そういうふうにコンピュータから伝える情報を抽象的な01とすることで，
スクリーンに表すすべての情報を指定しないで，
フレーム自体の情報と，もっとスクリーン一般に関わる情報を，分離することが出来るようになるわけだな．

こういうふうに，各々のパーツの機能を出来るだけ分離するというのはコンピュータサイエンスにおける原理原則の1つになる．
"""

[[page]]
t = "aut"
c = ""
p = """
これ以降の話はとりあえず，次のように考えてください．

- コンピュータはスクリーンに送るための512*256bitの情報を内部に保管している．
- これを便宜的にスクリーンメモリと呼ぶ．メモリのもっと正確な定義は後ほどやりますが，スクリーンメモリはメモリの一部になります．
- スクリーンメモリの初期状態は全て値が0である．
- スクリーンメモリの値は更新されるたびにスクリーンに送られ，表示が更新される．
"""

# 最序盤に左上からボールを落としてくるときにフレームを描くのに必要なのは変数の保存と四則演算=======================================

[[page]]
t = "title"
c = ""
p = """

"""

[[page]]
t = "left"
c = "yaranai1"
p = """
じゃあ，話をmPONGの最初，ボールが左上から落ちてくるところに話を戻そう．
ゲームは電源を入れるといきなり始まるわけだが，このゲームが始まった0フレーム目に注目する．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
この0フレーム目を描くためには，
最初のスクリーンメモリのすべてのbitが0の状態から，
0フレーム目に対応するように値を更新する必要がある．
では君が，この情報を作るんだったら，必要な情報は何だ？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
おれが作るんだったら，
ボールの初期位置とバットの初期位置，ボールの幅，バットの幅の情報さえあれば，
ボールとバットの位置に対応するbitが分かるから，それを1にして，
他は0のままで更新するね．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
コンピュータも概ね同じように処理しているよ，

そこで次のフレームの情報を作るためにはどうすればいいかな？
とりあえずバットは無視してボールだけを考えてくれ．
例えば，最初のボールの位置をA()としてみよう． 
"""

[[page]]
t = "right"
c = "yaruo_pc"
p = """
えーっと，このコマ送りにしたやつを見返すと，1フレームあたりボールの位置はx方向に+3,y方向に+3だけ動くな．
ってことは，次の位置はA'(x+3,y+3)になるから，まずA(x,y)から(x+1,y+1)までの4bitは0に変えて，
A'(x+3,y+3)から(x+4,y+4)までの4bitを1にするね．
"""

[[page]]
t = "left"
c = "yaranai_wink"
p = """
完璧だよ！ということは，最序盤ボールを右下へ動かすには

1. 現在のフレームでの位置A(x,y)から(x+1,y+1)までにある4bitを0にする
2. 次のフレームでの位置A'(x+3,y+3)から(x+4,y+4)までにある4bitを1にする
3. A=A'として1へ．

という手順になるな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ということで，ボールを動かすためにはボールの位置やボールの幅をコンピュータ内に記憶しておく必要があるな．
バットの動きは後でやるけど，バットの位置や幅も同じく記憶しておく必要がある．
これらはゲームの進行に伴って変わっていくものだから，変数と呼ぶことにしよう．(ゲーム性を上げるためにはバットの幅を変えることもあるだろう)
現在のボールの位置A(x,y)を覚える必要があるわけで，
例えば，x=5,y=10とかを覚えておく．x,yが変数．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
変数もスクリーンの状態と同じく，
bitを使って保存するのが自然だな．
"""

[[page]]
t = "right"
c = "yaruo_hirameki"
p = """
2進数で表せばよくねーか．
5=0101<sub>(2)</sub>だし10=1010<sub>(2)</sub>だから，
4bitあれば5も10も表せるよな．
"""

[[page]]
t = "left"
c = "yaranai_wink"
p = """
うん，その通り．そこで，ひとまずは，16bitで1つの数字を表すことにする．
そうすると，-32768~32767($2^{15}=32768$)までの数が表せる．
詳しくはここを参照だが，範囲が-32768~32767になる理由は詳しく分からなくても問題ない．2進法で5とか10を表せることが分かれば十分だ．
"""

[[page]]
t = "right"
c = "yaruo_donatsu"
p = """
それより小さい・大きい数とか，分数とか√2とかはどうやって表すんだ？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
    そういうのは無視しよう．mPONGを作る上では必要ないからな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
以上から，次の位置を計算するときには，2進数の足し算をすることになることが分かる．少々分かりづらいが16bitで正確に書くとA(5,10)から次の位置がA'(8,13)であることを知るためには，
- 000000000101 + 00000000011 = 0
- 000000000101 + 00000000011 = 0

を計算することになる．
"""


# キーボードからの入力に応じてバットの次のフレームでの位置を変える．　条件分岐 ==============================================================

[[page]]
t = "title"
c = ""
p = """
5
"""

[[page]]
t = "right"
c = "yaruo_macho"
p = """
結局画面の状態も，ゲームを進めるための変数もbitで表現して保尊しておく．
で，次のフレームに行くためにはチョロっと計算するんだな．
"""

[[page]]
t = "left"
c = "yaranai_wink"
p = """
素晴らしい要約をありがとう．
それが本質的に重要なところだ．
この勢いで，mPONGの別の部分も考えたい．
ボールが落ちてくるだけじゃゲームにはならないからな．
"""

[[page]]
t = "right"
c = "yaruo_hanahoji"
p = """
そうだな，バットを動かしたり，
ゲームオーバーでフリーズしたり
しないとゲームじゃないもんな？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ああ，まずバットからだ．バットは，
1. →を一度押すと，何もしない限りずっと右に動く
2. ←を一度押すと，何もしない限りずっと左に動く．

というふうに動く．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
重要なのはキーボードからの入力に応じて動きを変えるということだ．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
実装自体は難しくない．まずキーボードからのコンピュータに送られてくる情報は，
何のキーを押したかという情報だな．その情報はアスキーコードを使って数字に変換してキーボードから送ってもらうことにしよう．
アスキーコードについてはここを参照してみてくれ．
"""

[[page]]
t = "right"
c = "yaruo_pc"
p = """
これを見ると，aを押すとは97が送られてきて，dを押すと100が送られてくるってわけか．
0-127まであるってことは，7bitあれば表せるんだな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ああ，だからキーボードからの情報を受ける7bitのキーボードメモリを作ろう．
このメモリはスクリーンメモリと同じく
- キーボードからの入力に応じて1~127の値をとる．
- 何も押されていない(NULL)ときは0の値になる．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
このキーボードメモリの値を読み取って，変数rightに反映させる．
right=1のときは右に動かして，right=0のときは左に動かすことにすればいいな．
このrightの情報を使ってバットの次のフレームの位置を求めるにはどうすればいい？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
1. 現在のバットの位置bitを0に変える．
2. right=0なら3へ.right=1なら4へ飛ぶ．
3. 左に進む場合のバットの位置bitを1に変えて完了．
4. 右に進む場合のバットの位置bitを1に変えて完了．
っていう感じか？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
その通り．具体的にバットの場合は次の位置をどう計算するかが気になる人は，
このコマ送りにしたものを見てみてほしい．本質的にはボールのときと同じで，
例えば，バットの左上の位置B(z,w)を保存しておけば，次の位置を計算できるのは分かるな？
"""

[[page]]
t = "right"
c = "yaruo_pc"
p = """
うん，ちなみに次の位置はB'(z±,w)になるみたいだな．
バットは横にしか動かないのはいいとして，
1フレームあたりの横の動きがボールよりも小さいから，
ボールの動きを予測して動かないと追いつけないようになってるんだな．一応ゲーム性ってやつか？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
ちなみにキーの同時押しはどうなるんだ？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
対応しない．
"""



# w=16bitで15bit幅のメモリ　それぞれの幅などの説明  ===============================================================----==========================

[[page]]
t = "title"
c = ""
p = """
Z メモリのイントロダクション
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ここまでで分かったことは
- 画面の状態
- ボール・バットの位置
- キーボードからの入力

これら全てが01のbitで表せるということだ．
ただ，今までは形式がバラバラだった．
"""

[[page]]
t = "right"
c = "yaruo2"
p = """
画面の状態は512*256の2次元のbitだし，
変数は16bitで，
キーボードからの入力は7bitだもんな．
"""


[[page]]
t = "left"
c = "yaranai1"
p = """
ああ，本質的には皆同じなのだから1つにまとめて扱おう．
まず，変数を16bitで表したのと同じように，キーボードからの入力も16bitに合わせてしまおう．
下位7bitだけを使って，残りの11bitは常に0をとることになるな．

この次は何をすると思う？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
変数は16bitでキーボードからの入力も16bitだから，
スクリーンの512*256bitも16bitに合わせるとか？
"""

[[page]]
t = "left"
c = "yaranai_wink"
p = """
その通りだ．512/16=32だから，スクリーンの横一列は16bitを32個並べることで表現できる．
ということは合計で32*256=8192個の16bitがあれば，スクリーンを表現できるな．
ここで，2^10=1024を1Kで表すことにしよう．この表記を使うと・・・
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
16bitが8K個でスクリーンを表示できるってことだな．
"""


[[page]]
t = "left"
c = "yaranai1"
p = """
そう．そこで，
- スクリーンを表すbit
- 数字を表すbit
- キーボードからの入力を表すbit
それぞれを区別せずに，こういうふうに16bit単位で区切って1列に並べたものを，**メモリ**と呼ぶことにしよう．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
16bitで区切るのには何か意味があるのか？
10とか25とかじゃ駄目なのか？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
16bitが唯一の方法ではない．
ただ，区切りは2の累乗，つまり4,8,16,32,64で行うのが普通だ．
その理由はメモリをどう作るか・使うかを理解すれば分かるようになるから
後でのお楽しみだな．
"""


# mPONGには3つの機能が必要なことを説明，そして全てへ． ====================================================----==========================

[[page]]
t = "left"
c = "yaranai1"
p = """
以上から，mPONGを進めるためには

1. メモリの読み書き
2. 四則演算
3. 条件分岐

の3つが必要だが，これが出来れば十分だということを主張したい．

"""

[[page]]
t = "right"
c = "yaruo1"
p = """
例えば，ボールが壁に跳ね返ったり，ボールが下についたときにそこにバットがなければ，
ゲームオーバーでフリーズしたり，
あ，後はバーが横に行き過ぎたらそこでストップする機能もあるか？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
そう，それで全部だ．ボールが跳ね返るとボールが進む向きが変わるが，それは
- ボールの次の位置と壁の位置を比べる．
    - もしボールが壁にぶつかる位置にあれば，ボールを跳ね返らせて，進む方向を変える．
    - なければそのまま真っ直ぐ進める．
- 壁の位置と，ボールの進む方向は変数として保存しておく．

ゲームオーバーの判定は，
- ボールの次の位置が一番下まで到達したかを判定．一番下の位置は変数に保存しておく．
    - もし下についてなければそのまま進める．
    - もし一番下なら，そのときのボールの位置とバットの位置を比べて，
        - バットの範囲内にあれば，ボールを跳ね返らせる．
         なければ，ゲームオーバー．

バーの動きを端で制限するのは，
- バーの位置から計算される左端や右端の位置と，画面の両端の位置を比べる．
    - バットの次の位置が左端(右端)よりはみ出すなら，動きを止める．
    - はみ出さないなら，そのまま進める．

のような感じで，3つで実現できる．
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
確かに，何となく出来そうな感じがするな．
さすが，mPONG，機能の少ないクソゲーだぜ．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
いや，実は，機能が少ないからこの3つで何とか間に合う，という話ではないんだ．
この3つがあればどんなゲームもアプリも機能も作ることができる．
"""

[[page]]
t = "right"
c = "yaruo_formal"
p = """
twitterもp◯rnhubも，tiktokもamazonも？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
yes．
もちろん，配達したりは別の話だがな．コンピュータで見ている部分は，
この3つがあれば全部作れるぞ．
"""

[[page]]
t = "left"
c = "yaruo_fight"
p = """
おいおい本当かよ！？
証拠は？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
説明するには，事前知識が足りなすぎて無理だ．
今は信じてもらうしかない．しかしmPONGが出来ることは分かるだろう？
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
まーmPONGは何となくなー．
でも，3つの命令って言っても何だか曖昧じゃないか？
四則演算って言っても，足し算が少なくとも必要なのは分かったけどさ，
割り算とか掛け算とか，どこまで出来ることを想定してるんだ？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
確かに言う通りだよ．
そこを次回から詳しく見ていこうか．

1. メモリの読み書き
2. 四則演算
3. 条件分岐

と言っても，本当のところ何ができるコンピュータなのかは明確じゃない．
コンピュータが出来ることを完全に明確に把握しようと思ったら
どうすればいいと思う？
"""

[[page]]
t = "right"
c = "yaruo_aseri"
p = """
うーん・・・・全くわからん．

"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ヒントは，
"""

[[page]]
t = "right"
c = "yaruo_anger3"
p = """
だから分かんないって！
そもそもコンピュータが何で出来てるのかすら全く知らないしな．
どうやって計算してるっていわれても困るよ．
"""


[[page]]
t = "left"
c = "yaranai1"
p = """
それが次回からの課題だ．
"""





# ボツ　　　ゲームを進める=次のフレームを見せる　ゲームをする=フレームを次々と見る ==============================================================


[[page]]
t = "title"
c = ""
p = """
4
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
じゃあ，ボールが消されたり書かれたりするときに，
実際にコンピュータは何をしていると思う？
"""

[[page]]
t = "right"
c = "yaruo_nayami"
p = """
・・・？
そりゃあ画面を消せ，とか，ここにボールを書けとか，
そういうプログラムに従っているんじゃないのか？
・・・知らんけど．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
それも間違いではない．というか，質問が悪いな．
でも，ここで聞きたいのはそのプログラムに従った結果，
何をするのか，ということなんだ．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
まず，mPONGのゲーム画面は 横512 × 縦256 のマス目からできている．
1つ1つのマス目のことをピクセルと呼ぶ．
実際，ゲーム画面をどんどん拡大してみよう．
"""

[[page]]
t = "right"
c = "yaruo_hanahoji2"
p = """
拡大しても，元々四角形だから分かりづらいな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
たしかにその通りだな．イメージ的には
この画像をイメージしてほしい．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="https://i.pinimg.com/564x/a7/86/ff/a786ffc704323b12845f8e29906059d9.jpg" alt="">
"""


[[page]]
t = "left"
c = "yaranai1"
p = """
これと同じように，ボールは × ピクセルで，
棒は　×　ピクセルで
表されているんだ．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="ボールと棒をグリットで表現">
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
ここで，黒が塗られたピクセルを1で，塗られていないピクセルを0で表すことにしよう．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="ボールと棒をグリットで表現したものを01で表す">
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
すると，画面全体も同じように，01で表せるな．
といっても，ボールと棒以外の場所は何もないので，全部0だけどな．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="画面全体を01で表す">
"""

[[page]]
t = "right"
c = "yaruo_potechi"
p = """
赤とか青でピクセルを塗りたいときはどうするんだ？
2とか3で表せばいいのか？
"""
[[page]]
t = "left"
c = "yaranai1"
p = """
いや，このゲームは黒と白(黒を塗らない)の
2つの色でしかピクセルを塗らない．
だから，1つのピクセルの状態は0か1かのどちらかだ．
このように0と1どちらかの値をとるものを**ビット**(bit)と呼ぶ．
"""



[[page]]
t = "left"
c = "yaranai1"
p = """
以上からmPONGプレイ時の，
あるフレームでのスクリーンの状態は，
512×256bitの状態と対応している，と言える．

"""

[[page]]
t = "left"
c = "yaranai1"
p = """
じゃあ，ここでもう一度聞こう．
さっき動きを表すためには，
1. 現在のボールを消す
2. 次の位置にボールを書く

を繰り返すと言ったが，コンピュータは実際には何をすればいいと思う?
"""

[[page]]
t = "right"
c = "yaruo1"
p = """
えーっと，
ステップ1は今のボールに対応するbitを0に変えることだな
ステップ2はボールの次の位置に対応するbitを1を変えることだな．
"""

[[page]]
t = "raw"
c = ""
p = """
<img src="" alt="ステップ1とステップ2を図でも表す">
"""

[[page]]
t = "left"
c = "yaranai_wink"
p = """
その通りだ!
それが最初に聞きたかったことだったんだ．
"""

# ボツsection 5 ==============================================================

[[page]]
t = "left"
c = "yaranai1"
p = """
じゃあ，もっと詰めて考えよう．
「今のボールの位置に対応するbit」
と言う言い方は曖昧すぎるから，もっとはっきり指定してほしい．
例えば今のフレームがこんな状態だったらどう伝えればいい？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
うーん，今のボールの位置は，
左から5ピクセル，上から10ピクセルにあるbitをAとすると，
AとAから1つ右,1つ下,1つ右下の4つのbitになるかな．
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
いいね！じゃあ次のボールの左上の位置A'を
Aを使って表そうとするとどうなる？
mPONGのコマ送りをもう一度見てみよう．
ただし現在のぼーるの左上の位置をA(x,y)としてみよう．
つまり，さっきの例だとx=5,y=10ってことだな．
"""

[[page]]
t = "right"
c = "yaruo_pc"
p = """
これを見る感じだと，次の位置はA'(x+3,y+3)になるな．
だから，1にすべきは，A'(x+3,y+3)から(x+4,y+4)までの4bitだ．
"""

[[page]]
t = "left"
c = "yaranai_wink"
p = """
完璧だよ！ということは，ボールを動かすには
1. A(x,y)から(x+1,y+1)までにある4bitを0にする
2. A'(x+3,y+3)から(x+4,y+4)までにある4bitを1にする
3. A=A'として1へ．

という手順になるな．具体的にmPONGの最序盤のボールの動きは次のようになる．
"""

# ボツsection 5 ==============================================================

[[page]]
t = "left"
c = "yaranai1"
p = """
ということで，ボールを動かすためには
現在のボールの位置A(x,y)を覚える必要があるわけだな．
例えば，x=5,y=10とかだな．
やや天下り的だが，これもbit，つまり01で表しておきたい．
どうすればいい？
"""

[[page]]
t = "right"
c = "yaruo_hirameki"
p = """
2進数で表せばよくねーか．
5=0101<sub>(2)</sub>だし10=1010<sub>(2)</sub>だから，
4bitあれば5も10も表せるよな．
"""

[[page]]
t = "left"
c = "yaranai_wink"
p = """
うん，その通り．そこで，ひとまずは，16bitで1つの数字を表すことにする．
そうすると，-32768~32767($2^{15}=32768$)までの数が表せる．
詳しくはここを参照だが，範囲が-32768~32767になる理由は詳しく分からなくても問題ない．2進法で5とか10を表せることが分かれば十分だ．
"""

[[page]]
t = "right"
c = "yaruo_donatsu"
p = """
それより小さい・大きい数とか，分数とか√2とかはどうやって表すんだ？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
    そういうのは無視しよう．mPONGを作る上では必要ないからな．
"""




[[page]]
t = "left"
c = "yaranai1"
p = """
以上から，次の位置を計算するときには，2進数の足し算をすることになることが分かる．少々分かりづらいが16bitで正確に書くとA(5,10)から次の位置がA'(8,13)であることを知るためには，
- 000000000101 + 00000000011 = 0
- 000000000101 + 00000000011 = 0

を計算することになる．
"""





[[page]]
t = "right"
c = "yaruo1"
p = """
ふーん，まあいいや．

"""






# ボツ　マッピングについて触れないことの説明    ===============================================================----==========================

[[page]]
t = "left"
c = "yaranai1"
p = """
なー，さっき入力をそのまま01で表すっていうときには特に思わなかったけどさ，
これどうやってキーボードからの入力がメモリの値に繋がっているんだ？
俺たちがキーボードを押すだけだよな？
そこから，どうやってメモリの値が97になったり100になったりするんだ？
"""

[[page]]
t = "left"
c = "yaranai1"
p = """
というか，そう考えていくと，どうやってメモリの値に合わせて
スクリーンのある場所を黒くしたり，白くしたりしているんだ？
"""


